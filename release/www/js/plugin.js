"use strict";angular.module("owsWalletPlugin",["gettext","ionic","ngLodash","owsWalletPluginClient","owsWalletPlugin.api","owsWalletPlugin.controllers","owsWalletPlugin.services"]),angular.module("owsWalletPlugin.api",[]),angular.module("owsWalletPlugin.controllers",[]),angular.module("owsWalletPlugin.services",[]),angular.module("owsWalletPlugin").config(function($pluginConfigProvider){$pluginConfigProvider.router.routes([{path:"/accounts/:accountId",method:"GET",handler:"getAccounts"},{path:"/accounts/:accountId/addresses",method:"POST",handler:"createAddress"},{path:"/accounts/:accountId/buys",method:"POST",handler:"requestBuy"},{path:"/accounts/:accountId/sells",method:"POST",handler:"requestSell"},{path:"/payment-methods",method:"GET",handler:"getPaymentMethods"},{path:"/prices",method:"GET",handler:"getPriceInfo"},{path:"/prices/buy/:currency",method:"GET",handler:"getBuyPrice"},{path:"/prices/sell/:currency",method:"GET",handler:"getSellPrice"},{path:"/service",method:"PUT",handler:"service"},{path:"/transactions/pending",method:"GET",handler:"getPendingTransactions"},{path:"/transactions/pending",method:"POST",handler:"savePendingTransactions"},{path:"/urls",method:"GET",handler:"getUrls"},{path:"/user",method:"GET",handler:"getUser"}])}).run(function(){owswallet.Plugin.ready(function(){})}),angular.module("owsWalletPlugin").run(["gettextCatalog",function(gettextCatalog){}]),angular.module("owsWalletPlugin.services").factory("coinbaseApiService",function($log,$http,Storage){function setCredentials(config){credentials.NETWORK="livenet",credentials.SCOPE="wallet:accounts:read,wallet:addresses:read,wallet:addresses:create,wallet:user:read,wallet:user:email,wallet:buys:read,wallet:buys:create,wallet:sells:read,wallet:sells:create,wallet:transactions:read,wallet:transactions:send,wallet:transactions:send:bypass-2fa,wallet:payment-methods:read",credentials.REDIRECT_URI=isCordova?config.redirect_uri.mobile:config.redirect_uri.desktop,"testnet"==credentials.NETWORK?(credentials.HOST=config.sandbox.host,credentials.API=config.sandbox.api,credentials.CLIENT_ID=config.sandbox.client_id,credentials.CLIENT_SECRET=config.sandbox.client_secret):(credentials.HOST=config.production.host,credentials.API=config.production.api,credentials.CLIENT_ID=config.production.client_id,credentials.CLIENT_SECRET=config.production.client_secret),credentials.API_VERSION="2017-10-31"}function saveToken(accessToken,refreshToken,cb){storage.setAccessToken(accessToken).then(function(value){return storage.setRefreshToken(refreshToken)}).then(function(value){return createCoinbaseApiSender(accessToken),cb(null,accessToken)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error)})}function createCoinbaseApiSender(token){httpApi=new Http(credentials.API+"/v2/",{headers:{"Content-Type":"application/json",Accept:"application/json","CB-VERSION":credentials.API_VERSION,Authorization:"Bearer "+token}})}function getErrorsAsString(data){var errData;try{if(data&&data.errors)errData=data.errors;else{if(!data||!data.error)return"Unknown error";errData=data.error_description}if(!lodash.isArray(errData))return errData=errData&&errData.message?errData.message:errData;if(lodash.isArray(errData)){for(var errStr="",i=0;i<errData.length;i++)errStr=errStr+errData[i].message+". ";return errStr}return JSON.stringify(errData)}catch(e){$log.error(e)}}var coinbaseApi,root={},isCordova=owswallet.Plugin.isCordova(),credentials={},storage=new Storage([network+".access-token",network+".refresh-token",network+".txs"]),coinbaseHost=new Http(credentials.HOST,{headers:{"Content-Type":"application/json",Accept:"application/json"}});return root.init=function(config){setCredentials(config)},root.getStorage=function(){return storage},root.getNetwork=function(){return credentials.NETWORK},root.getToken=function(oauthCode,cb){var data={grant_type:"authorization_code",code:oauthCode,client_id:credentials.CLIENT_ID,client_secret:credentials.CLIENT_SECRET,redirect_uri:credentials.REDIRECT_URI};coinbaseHost.post("oauth/token/",data).then(function(data){if(!(data&&data.access_token&&data.refresh_token))return cb("Could not get the access token");saveToken(data.access_token,data.refresh_token,cb)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.refreshToken=function(refreshToken,cb){var data={grant_type:"refresh_token",client_id:credentials.CLIENT_ID,client_secret:credentials.CLIENT_SECRET,redirect_uri:credentials.REDIRECT_URI,refresh_token:refreshToken};coinbaseHost.post("oauth/token/",data).then(function(data){if(!(data&&data.access_token&&data.refresh_token))return cb("Could not get the access token");saveToken(data.access_token,data.refresh_token,cb)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.getAccounts=function(cb){coinbaseApi.get("accounts/").then(function(data){return cb(null,data.data)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.getAccount=function(accountId,cb){coinbaseApi.get("accounts/"+accountId).then(function(data){return cb(null,data.data)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.getCurrentUser=function(cb){coinbaseApi.get("user/").then(function(data){return cb(null,data.data)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.getBuyOrder=function(accountId,buyId,cb){coinbaseApi.get("accounts/"+accountId+"/buys/"+buyId).then(function(data){return cb(null,data.data)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.getTransaction=function(accountId,transactionId,cb){coinbaseApi.get("accounts/"+accountId+"/transactions/"+transactionId).then(function(data){return cb(null,data.data)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.getTransactions=function(accountId,cb){coinbaseApi.get("accounts/"+accountId+"/transactions").then(function(data){return cb(null,data.data)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.sellPrice=function(currency,cb){coinbaseApi.get("prices/sell?currency="+currency).then(function(data){return cb(null,data.data)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.buyPrice=function(currency,cb){coinbaseApi.get("prices/buy?currency="+currency).then(function(data){return cb(null,data.data)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.getPaymentMethods=function(cb){coinbaseApi.get("payment-methods/").then(function(data){return cb(null,data.data)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.sellRequest=function(accountId,data,cb){var data={amount:data.amount,currency:data.currency,payment_method:data.payment_method||null,commit:data.commit||!1,quote:data.quote||!1};coinbaseApi.post("accounts/"+accountId+"/sells",data).then(function(data){return cb(null,data.data)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.buyRequest=function(accountId,data,cb){var data={amount:data.amount,currency:data.currency,payment_method:data.payment_method||null,commit:data.commit||!1,quote:data.quote||!1};coinbaseApi.post("accounts/"+accountId+"/buys",data).then(function(data){return cb(null,data.data)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.createAddress=function(accountId,data,cb){var data={name:data.name};coinbaseApi.post("accounts/"+accountId+"/addresses",data).then(function(data){return cb(null,data.data)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root.sendTo=function(accountId,data,cb){var data={type:"send",to:data.to,amount:data.amount,currency:data.currency,description:data.description};coinbaseApi.post("accounts/"+accountId+"/transactions",data).then(function(data){return cb(null,data.data)}).catch(function(error){return $log.error("Coinbase: GET Access Token ERROR "+error.status+". "+getErrorsAsString(error.data)),cb(error.data)})},root}),angular.module("copayApp.services").factory("coinbaseService",function($rootScope,$log,lodash,coinbaseApiService,configService,appConfigService,feeService){var root={},storage=(Session.getInstance(),coinbaseApiService.getNetwork(),coinbaseApiService.getStorage()),priceSensitivity=[{value:.5,name:"0.5%"},{value:1,name:"1%"},{value:2,name:"2%"},{value:5,name:"5%"},{value:10,name:"10%"}],selectedPriceSensitivity=priceSensitivity[1];owswallet.Plugin.onEvent(function(event){var network=lodash.get(event,"event.n.data.network");"NewBlock"==event.type&&"livenet"==network&&updatePendingTransactions()}),root.accessAccount=lodash.throttle(function(cb){$log.debug("Accessing Coinbase account..."),storage.getAccessToken.then(function(err,accessToken){if(!accessToken)return cb();getMainAccountId(accessToken,function(err,accountId){if(!err)return cb(null,{accessToken:accessToken,accountId:accountId});if(!err.errors||err.errors&&!lodash.isArray(err.errors))return cb(err);for(var expiredToken,i=0;i<err.errors.length;i++)expiredToken="expired_token"==err.errors[i].id;if(!expiredToken)return cb(err);$log.debug("Refresh token"),storage.getRefreshToken.then(function(refreshToken){refreshToken(refreshToken,function(err,newToken){if(err)return cb(err);getMainAccountId(newToken,function(err,accountId){return err?cb(err):cb(null,{accessToken:newToken,accountId:accountId})})})}).catch(function(error){cb(error)})})}).catch(function(error){return cb()})},1e4),root.logout=function(){storage.removeAccessToken.then(function(){return storage.removeRefreshToken()}).then(function(){return storage.removeTxs()}).then(function(){cb()}).catch(function(error){$log.error(error)})},root.getUrls=function(){return{oauthCodeUrl:credentials.HOST+"/oauth/authorize?response_type=code&client_id="+credentials.CLIENT_ID+"&redirect_uri="+credentials.REDIRECT_URI+"&state=SECURE_RANDOM&scope="+credentials.SCOPE+"&meta[send_limit_amount]=1000&meta[send_limit_currency]=USD&meta[send_limit_period]=day",signupUrl:credentials.HOST+"/signup",supportUrl:"https://support.coinbase.com/"}},root.getPriceSensitivity=function(){return{values:priceSensitivity,selected:selectedPriceSensitivity}},root.getStoredToken=function(cb){storage.getAccessToken.then(function(accessToken){return cb(accessToken)}).catch(function(error){return cb()})},root.savePendingTransaction=function(ctx,opts,cb){savePendingTransaction(ctx,opts,cb)},root.getPendingTransactions=function(coinbasePendingTransactions){storage.getTxs.then(function(txs){txs=txs?JSON.parse(txs):{},coinbasePendingTransactions.data=lodash.isEmpty(txs)?null:txs,root.accessAccount(function(err,data){if(err)return void $log.error(err);if(!lodash.isEmpty(data)){var accessToken=data.accessToken,accountId=data.accountId;lodash.forEach(coinbasePendingTransactions.data,function(dataFromStorage,txId){"sell"==dataFromStorage.type&&"completed"==dataFromStorage.status||"buy"==dataFromStorage.type&&"completed"==dataFromStorage.status||"error"==dataFromStorage.status||"send"==dataFromStorage.type&&"completed"==dataFromStorage.status||root.getTransaction(accessToken,accountId,txId,function(err,tx){if(err||lodash.isEmpty(tx)||tx.data&&tx.data.error)return void savePendingTransaction(dataFromStorage,{status:"error",error:tx.data&&tx.data.error?tx.data.error:err},function(err){err&&$log.debug(err),updateTxs(coinbasePendingTransactions)});updateCoinbasePendingTransactions(dataFromStorage,tx.data),coinbasePendingTransactions.data[txId]=dataFromStorage,"send"==tx.data.type&&"completed"==tx.data.status&&tx.data.from?root.sellPrice(accessToken,dataFromStorage.sell_price_currency,function(err,s){if(err)return void savePendingTransaction(dataFromStorage,{status:"error",error:err},function(err){err&&$log.debug(err),updateTxs(coinbasePendingTransactions)});var newSellPrice=s.data.amount;Math.abs((newSellPrice-dataFromStorage.sell_price_amount)/dataFromStorage.sell_price_amount*100)<dataFromStorage.price_sensitivity.value?sellPending(dataFromStorage,accessToken,accountId,coinbasePendingTransactions):savePendingTransaction(dataFromStorage,{status:"error",error:{errors:[{message:"Price falls over the selected percentage"}]}},function(err){err&&$log.debug(err),updateTxs(coinbasePendingTransactions)})}):"buy"==tx.data.type&&"completed"==tx.data.status&&tx.data.buy?sendToWallet(dataFromStorage,accessToken,accountId,coinbasePendingTransactions):savePendingTransaction(dataFromStorage,{},function(err){err&&$log.debug(err),updateTxs(coinbasePendingTransactions)})})})}})}).catch(function(error){return $log.error(error),error})};var updatePendingTransactions=lodash.throttle(function(){$log.debug("Updating coinbase pending transactions...");var pendingTransactions={data:{}};root.getPendingTransactions(pendingTransactions)},2e4),updateTxs=function(coinbasePendingTransactions){storage.getTxs.then(function(txs){txs=txs?JSON.parse(txs):{},coinbasePendingTransactions.data=lodash.isEmpty(txs)?null:txs}).catch(function(error){$log.error(error)})},sellPending=function(tx,accessToken,accountId,coinbasePendingTransactions){var data=tx.amount;data.payment_method=tx.payment_method||null,data.commit=!0,root.sellRequest(accessToken,accountId,data,function(err,res){if(err)savePendingTransaction(tx,{status:"error",error:err},function(err){err&&$log.debug(err),updateTxs(coinbasePendingTransactions)});else{if(res.data&&!res.data.transaction)return void savePendingTransaction(tx,{status:"error",error:{errors:[{message:"Sell order: transaction not found."}]}},function(err){err&&$log.debug(err),updateTxs(coinbasePendingTransactions)});root.getTransaction(accessToken,accountId,res.data.transaction.id,function(err,updatedTx){if(err)return void savePendingTransaction(tx,{status:"error",error:err},function(err){err&&$log.error(err),updateTxs(coinbasePendingTransactions)});savePendingTransaction(tx,{remove:!0},function(err){savePendingTransaction(updatedTx.data,{},function(err){err&&$log.debug(err),updateTxs(coinbasePendingTransactions)})})})}})},sendToWallet=function(tx,accessToken,accountId,coinbasePendingTransactions){if(tx){var desc=appConfigService.nameCase+" Wallet";getNetAmount(tx.amount.amount,function(err,amountBTC,feeBTC){if(err)return void savePendingTransaction(tx,{status:"error",error:{errors:[{message:err}]}},function(err){err&&$log.debug(err),updateTxs(coinbasePendingTransactions)});var data={to:tx.toAddr,amount:amountBTC,currency:tx.amount.currency,description:desc,fee:feeBTC};root.sendTo(accessToken,accountId,data,function(err,res){if(err)savePendingTransaction(tx,{status:"error",error:err},function(err){err&&$log.debug(err),updateTxs(coinbasePendingTransactions)});else{if(res.data&&!res.data.id)return void savePendingTransaction(tx,{status:"error",error:{errors:[{message:"Transactions not found in Coinbase.com"}]}},function(err){err&&$log.debug(err),updateTxs(coinbasePendingTransactions)});root.getTransaction(accessToken,accountId,res.data.id,function(err,sendTx){if(err)return void savePendingTransaction(tx,{status:"error",error:err},function(err){err&&$log.error(err),updateTxs(coinbasePendingTransactions)});savePendingTransaction(tx,{remove:!0},function(err){err&&$log.error(err),savePendingTransaction(sendTx.data,{},function(err){err&&$log.debug(err),updateTxs(coinbasePendingTransactions)})})})}})})}},getNetAmount=function(amount,cb){feeService.getFeeRate("btc","livenet","normal",function(err,feePerKb){if(err)return cb("Could not get fee rate");var feeBTC=(.45*feePerKb/1e8).toFixed(8);return cb(null,amount-feeBTC,feeBTC)})},getMainAccountId=function(accessToken,cb){root.getAccounts(accessToken,function(err,a){if(err)return cb(err);for(var data=a.data,i=0;i<data.length;i++)if(data[i].primary&&"wallet"==data[i].type&&data[i].currency&&"BTC"==data[i].currency.code)return cb(null,data[i].id);return root.logout(function(){}),cb("Your primary account should be a BTC WALLET. Set your wallet account as primary and try again")})},updateCoinbasePendingTransactions=function(obj){for(var i=1;i<arguments.length;i++)for(var prop in arguments[i]){var val=arguments[i][prop];"object"==typeof val?updateCoinbasePendingTransactions(obj[prop],val):obj[prop]=val||obj[prop]}return obj},savePendingTransaction=function(ctx,opts,cb){storage.getTxs.then(function(oldTxs){lodash.isString(oldTxs)&&(oldTxs=JSON.parse(oldTxs)),lodash.isString(ctx)&&(ctx=JSON.parse(ctx));var tx=oldTxs||{};return tx[ctx.id]=ctx,opts&&(opts.error||opts.status)&&(tx[ctx.id]=lodash.assign(tx[ctx.id],opts)),opts&&opts.remove&&delete tx[ctx.id],tx=JSON.stringify(tx),storage.setTxs(tx)}).catch(function(error){return cb(err)})};return root}),angular.module("owsWalletPlugin.api").service("createAddress",function(coinbaseApiService){var root={};return root.respond=function(message,callback){var accountId=message.request.params.accountId,data=message.request.data.data;if(!accountId)return message.response={statusCode:500,statusText:"REQUEST_NOT_VALID",data:{message:"Missing required account id."}},callback(message);coinbaseApiService.createAddress(accountId,data).then(function(response){return message.response={statusCode:200,statusText:"OK",data:account},callback(response)}).catch(function(error){return message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)})},root}),angular.module("owsWalletPlugin.api").service("getAccounts",function(coinbaseApiService){var root={};return root.respond=function(message,callback){message.request.params.accountId?coinbaseApiService.getAccounts().then(function(response){return message.response={statusCode:200,statusText:"OK",data:response},callback(message)}).catch(function(error){return message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)}):coinbaseApiService.getAccounts().then(function(response){return message.response={statusCode:200,statusText:"OK",data:response},callback(message)}).catch(function(error){return message.response={statusCode:404,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)})},root}),angular.module("owsWalletPlugin.api").service("getBuyPrice",function(coinbaseApiService){var root={};return root.respond=function(message,callback){var currency=message.request.params.currency;if(!currency)return message.response={statusCode:500,statusText:"REQUEST_NOT_VALID",data:{message:"Missing required currency."}},callback(message);coinbaseApiService.buyPrice(currency).then(function(response){return message.response={statusCode:200,statusText:"OK",data:account},callback(response)}).catch(function(error){return message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)})},root}),angular.module("owsWalletPlugin.api").service("getCurrentUser",function(coinbaseApiService){var root={};return root.respond=function(message,callback){coinbaseApiService.getCurrentUser().then(function(response){return message.response={statusCode:200,statusText:"OK",data:account},callback(response)}).catch(function(error){return message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)})},root}),angular.module("owsWalletPlugin.api").service("getPaymentMethods",function(coinbaseApiService){var root={};return root.respond=function(message,callback){coinbaseApiService.getPaymentMethods(accountId).then(function(response){return message.response={statusCode:200,statusText:"OK",data:txs},callback(response)}).catch(function(error){return message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)})},root}),angular.module("owsWalletPlugin.api").service("getPendingTransactions",function(coinbaseApiService){var root={};return root.respond=function(message,callback){var pendingTransactions={data:{}};coinbaseApiService.getPendingTransactions(pendingTransactions).then(function(){return message.response={statusCode:200,statusText:"OK",data:pendingTransactions},callback(message)}).then(function(error){return message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)})},root}),angular.module("owsWalletPlugin.api").service("getPriceInfo",function(coinbaseService){var root={};return root.respond=function(message,callback){return message.response={statusCode:200,statusText:"OK",data:coinbaseService.getPriceSensitivity()},callback(response)},root}),angular.module("owsWalletPlugin.api").service("getSellPrice",function(coinbaseApiService){var root={};return root.respond=function(message,callback){var currency=message.request.params.currency;if(!currency)return message.response={statusCode:500,statusText:"REQUEST_NOT_VALID",data:{message:"Missing required currency."}},callback(message);coinbaseApiService.sellPrice(currency).then(function(response){return message.response={statusCode:200,statusText:"OK",data:account},callback(response)}).catch(function(error){return message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)})},root}),angular.module("owsWalletPlugin.api").service("getTransactions",function(coinbaseApiService){var root={};return root.respond=function(message,callback){var accountId=message.request.params.accountId,transactionId=message.request.params.transactionId;if(!accountId)return message.response={statusCode:500,statusText:"REQUEST_NOT_VALID",data:{message:"Missing required account id or pending."}},callback(message);transactionId?coinbaseApiService.getTransaction(accountId,transactionId).then(function(response){return message.response={statusCode:200,statusText:"OK",data:response},callback(message)}).catch(function(error){return message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)}):coinbaseApiService.getTransactions(accountId).then(function(response){return message.response={statusCode:200,statusText:"OK",data:response},callback(message)}).catch(function(error){return message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)})},root}),angular.module("owsWalletPlugin.api").service("getUrls",function(coinbaseService){var root={};return root.respond=function(message,callback){return message.response={statusCode:200,statusText:"OK",data:coinbaseService.getUrls()},callback(response)},root}),angular.module("owsWalletPlugin.api").service("requestBuy",function(coinbaseApiService){var root={};return root.respond=function(message,callback){var accountId=message.request.params.accountId,data=message.request.data.data;if(!accountId)return message.response={statusCode:500,statusText:"REQUEST_NOT_VALID",data:{message:"Missing required account id."}},callback(message);coinbaseApiService.requestBuy(accountId,data).then(function(response){return message.response={statusCode:200,statusText:"OK",data:account},callback(response)}).catch(function(error){return message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)})},root}),angular.module("owsWalletPlugin.api").service("requestSell",function(coinbaseApiService){var root={};return root.respond=function(message,callback){var accountId=message.request.params.accountId,data=message.request.data.data;if(!accountId)return message.response={statusCode:500,statusText:"REQUEST_NOT_VALID",data:{message:"Missing required account id."}},callback(message);coinbaseApiService.requestSell(accountId,data).then(function(response){return message.response={statusCode:200,statusText:"OK",data:account},callback(response)}).catch(function(error){return message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)})},root}),angular.module("owsWalletPlugin.api").service("savePendingTransaction",function(coinbaseApiService){var root={};return root.respond=function(message,callback){var tx=message.request.data.tx,options=message.request.data.options;if(!tx)return message.response={statusCode:500,statusText:"REQUEST_NOT_VALID",data:{message:"Missing required transaction."}},callback(message);coinbaseApiService.savePendingTransaction(tx,options,function(error){return error?(message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)):(message.response={statusCode:200,statusText:"OK",data:{}},callback(message))})},root}),angular.module("owsWalletPlugin.api").service("service",function(coinbaseService,coinbaseApiService){var root={};return root.respond=function(message,callback){var data=message.request.data.state,oauthCode=message.request.data.oauthCode,pluginConfig=message.request.data.config;if(!state)return message.response={statusCode:500,statusText:"REQUEST_NOT_VALID",data:{message:"Missing required state."}},callback(message);switch(state){case"configure":return pluginConfig?(coinbaseApiService.init(pluginConfig.service),message.response={statusCode:200,statusText:"OK",data:data},callback(response)):(message.response={statusCode:500,statusText:"REQUEST_NOT_VALID",data:{message:"Missing required configuration."}},callback(message));case"access-api":if(!oauthCode)return message.response={statusCode:500,statusText:"REQUEST_NOT_VALID",data:{message:"Missing required oauth code."}},callback(message);coinbaseApiService.getToken(oauthCode,function(error){return error?(message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)):(message.response={statusCode:200,statusText:"OK",data:data},callback(response))});break;case"access-account":coinbaseService.accessAccount(function(error,data){return error?(message.response={statusCode:500,statusText:"UNEXPECTED_ERROR",data:{message:error.message}},callback(message)):(message.response={statusCode:200,statusText:"OK",data:data},callback(response))});break;case"logout":return coinbaseService.logout(),message.response={statusCode:200,statusText:"OK",data:{}},callback(response)}},root});